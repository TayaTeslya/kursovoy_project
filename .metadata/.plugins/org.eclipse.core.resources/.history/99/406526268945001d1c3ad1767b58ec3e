package kursa4_console;
import java.util.Scanner;

public class App {
	
	
	// Меню
	public static void menu() {
		
		Scanner scanner = new Scanner(System.in);
		String m = "0";
		
		while (m != "3") {
			
			System.out.println("------------------------------------");
			System.out.println("Меню:");
			System.out.println("------------------------------------");
			System.out.println("1 - Решить СЛУ методом Гаусса");
			System.out.println("2 - Решить СЛУ методом квадратных корней");
			System.out.println("3 - Выйти");
			System.out.println("4 - Найти определитель матрицы");
			System.out.println("------------------------------------");
			
			m = scanner.nextLine();
		
			switch (m) {
			
			case "1": 
				method("methodGauss");
				break;
				
			case "2": 
				method("methodSquareRoots");
				break;
				
			case "3": 
				System.out.println("До свидания!");
				m = "3";
				System.exit(0);
				break;
				
			case "4":
				method("findDet");
				break;
				
			default:
				System.out.println("Пожалуйста, введите нужный вам пункт");
				
			}
			
			System.out.println("\n");
			
		}
		
	}

	
	// Метод Гаусса
	public static void methodGauss(SystemOfEquations systemOfEquations) {
		
			System.out.println("Метод Гаусса: " + "\n");
			
			// Прямой проход
			SystemOfEquations trilangularMatrix = triangularMatrixByGaussMethod(systemOfEquations);
			for (int i = 0; i < trilangularMatrix.getX().length; i++) {
				
				for (int j = 0; j < trilangularMatrix.getX().length; j++) {
					
					System.out.print(trilangularMatrix.getX()[i][j] + " ");
					
				}
				
				System.out.println("= " + trilangularMatrix.getB()[i]);
				
			}
			
			// Обратный проход
			
			for (int i = trilangularMatrix.getX().length - 1; i >= 0; i--) {
				
				for (int j = trilangularMatrix.getX().length - 1; j >= 0; j--) {
					
					
					
				}
				
			}
			
	}
	
	
	public static double reverseGauss(double[] str, double b) {
		
		double x;
		
		for (int j = 0; j < str.length; j++) {
			
		}
		
		return x;
		
	}
	
	
	// Метод квадратных корней
	public static void methodSquareRoots(SystemOfEquations systemOfEquations) {
		
		System.out.println("Метод квадратных корней: " + "\n");
		
		// Проверка на симметричность матриц
		for (int i = 0; i < systemOfEquations.getX().length; i++) {
			
			if (systemOfEquations.getX()[i][systemOfEquations.getX().length - 1 - i] != 
					systemOfEquations.getX()[systemOfEquations.getX().length - 1 - i][i]) {
				
				System.out.println("Матрица нессиметричная,  метод квадратных корней не подходит.");
				return;
				
			}
			
		}
		
		//Нахождение определителя матрицы 
		
		double det = recursiveDet(systemOfEquations.getX());
		
		if (det != 0) {
			
			
			
		}
		else {
			
			System.out.println("Определитель матрицы данной СЛУ равен 0");
			System.out.println("СЛУ имеет несколько решений");
			System.out.println("Метод квадратных корней не подходит");
			
		}
		
	}
	
	
	public static double recursiveDet(double[][] x) {
		
		double det = 0;
		double dopDet;
		
		if (x.length == 2) {
			
			dopDet = findDet(x[0][0], x[1][1], x[0][1], x[1][0]);
			return dopDet; // выход из процедуры
			
		}
		else {
			
			for (int k = 0; k < x.length; k++) {
				
				if (k % 2 == 0 || k == 0) {
					
					dopDet = x[k][0]; // то, что умножается на определитель минора матрицы
					
				}
				else {
					
					dopDet = -x[k][0];
					
				}
				
				double[][] dopX = new double[x.length - 1][x.length - 1]; // минорная матрицы
				int ii = 0;
				int jj = 0;
				
				for (int i = 0; i < x.length; i++) { // сохранение минора матрицы
					
					jj = 0;
					
					if (i != k) { // если не строка с коэффициентом
						
						for (int j = 1; j < x.length; j++) {
							
							dopX[ii][jj] = x[i][j];
							jj++;
							
						}
						
						ii++;
						
					}
					
				}
				
				dopDet *= recursiveDet(dopX);
				det += dopDet;
				
			}
			
		}
		
		return det;
		
	}
	
	
	public static double findDet(double a, double c, double b, double d) {
		
		double det = a * c - d * b;
		
		return det;
		
	}
	
	
	// Приведение к вехнетреугольной матрице методом Гаусса (прямой проход)
	public static SystemOfEquations triangularMatrixByGaussMethod(SystemOfEquations systemOfEquations) {
		
		double[][] x = systemOfEquations.getX().clone();
		double[] b = systemOfEquations.getB().clone();
		
		// следующие строки изменяем по следующему принципу (пример на 3 строчке):
		// 1) Умножаем первую строку на первый коэффициент видоизменяемой строки (при этом сама строчка не меняется)
		// 2) Вычитаем видоизменяемую строку из полученной, таким образом первый коэффициент видоизменяемой строки становится равным 0
		// 3) Дальше умножаем вторую строку на второй коэф видоизменяемой и вычитаем видоизменяемую, таким образом получаем 2 коэф равный 0
		// 4) Делим всю видоизменяемую строку на её третий коэф, благодаря чему третий коэф = 1
		// перестановка строк
		// ищем в какой строке самый максимальный элемент стоблца той диагонали, которую мы ищем
		// перемещаем на верх
		// учитываем когда нет решений
		
		boolean breakOrNot = false;
		int[] max = new int[2]; // 0 - i; 1 - j
		
		for (int j = 0; j < x.length; j++) {
			
			max[0] = j; // ставим изначальный максимальный элемент - диагональный
			max[1] = j;
			
			for (int i = j; i < x.length; i++) {
				
				System.out.print(x[i][j] + " ");
				
				if (Math.abs(x[i][j]) > Math.abs(x[max[0]][max[1]])) {
					
					max[0] = i;
					
				}
				
			}
			
			System.out.println("\n" + x[max[0]][max[1]]);
			
			if (x[max[0]][max[1]] == 0) {
				
				System.out.println("x" + j + " неизвестный невозможно найти из данной системы линейных уравнений");
				breakOrNot = true;
				break;
				
			}
			
			if (max[0] != max[1]) { // если i и j не совпадают, то максимальный элемент стоблца находится не на диагонали
				
				double dop = b[max[0]]; // max[0] - строка с максимумом
				b[max[0]] = b[j]; // j - строка с диагональю 
				b[j] = dop;
				
				for (int i = 0; i < x.length; i++) { // i - номер столбца
					
					dop = x[j][i];
					x[j][i] = x[max[0]][i];
					x[max[0]][i] = dop;
					
				}
				
			}
			
			for (int i = 0; i < x.length; i++) {
				
				for (int ii = 0; ii < x.length; ii++) {
					
					System.out.print(x[i][ii] + " ");
					
				}
				
				System.out.println("| " + b[i]);
				
			}
			
			System.out.println("");
			
		}
		
		if (!breakOrNot) {
			
			double k;
			
			for (int i = 0; i < x.length; i++) {
				
				for (int l = 0; l < i; l++) { // проходим по каждому элементу видоизменяемой строки до диагональной
					
					k = x[i][l];
					
					for (int j = 0; j < x.length; j++) {
						
						x[i][j] = x[l][j] * k - x[i][j]; // вычитаем строчки
						
					}
					
					b[i] = b[l] * k - b[i];
					
				}
				
				if (x[i][i] != 0) {
					
					k = x[i][i];
					
					for (int j = i; j < x.length; j++) {
						
						x[i][j] /= k;
						
					}
					
					b[i] /= k;
					
				}
				
			}	
			
			return new SystemOfEquations(x, b);
			
		}
		else {
			
			System.out.println("Найти все неизвестные в данной СЛУ нельзя с помощью метода Гаусса.");
			return new SystemOfEquations(x, b);
			
		}
		
	}
		
	
	// Решение СЛУ
	public static void method(String method) {
		
		Scanner scanner = new Scanner(System.in);
		SystemOfEquations systemOfEquations = inputEquations();

		// вывод системы уравнений
		System.out.println("Полученная система линейных уравнений: ");
		
		for (int i = 0; i < systemOfEquations.getX().length; i++) {
			
			for (int j = 0; j < systemOfEquations.getX().length; j++) {
				
				System.out.print(systemOfEquations.getX()[i][j] + "x" + j);
				
				if (j + 1 == systemOfEquations.getX().length) {
					
					System.out.print(" = ");
					break;
					
				}
				
				System.out.print(" + ");
				
			}
			
			System.out.println(systemOfEquations.getB()[i]);
			
		}
		
		if (method == "methodGauss") {
			
			methodGauss(systemOfEquations);
			
		}
		else {
			
			methodSquareRoots(systemOfEquations);
			
		}
		
		String m = "";
		
		while (m == "") {
			
			System.out.print("\n" + "Введите любой символ для завершения: ");
			m = scanner.nextLine();
			
		}
		
		System.out.println("\n\n\n\n\n");
		
	}
	
	
	// Ввод СЛУ
	public static SystemOfEquations inputEquations() {
		
		Scanner scanner = new Scanner(System.in);
		
		// кол-во уравнений и неизвестных
		int n = 0;
		
		while (n < 2) {
			
			System.out.print("Введите кол-во уравнений и неизвестных (больше 1): ");
			
			try {
				
				n = Integer.valueOf(scanner.nextLine()); // ВВОД ДРОЬБНЫХ!!!!!!!!!!!
				
			} catch (Exception e) { }
			
		}
		
		double[][] x = new double[n][n];
		double[] b = new double[n];
		
		// ввод коэффициентов при неизвестных
		for (int i = 0; i < n; i++) {
			
			for (int j = 0; j < n; j++) {
				
				System.out.print("Введите коэффициент x" + j + " " + i + " уравнения: ");
				x[i][j] = scanner.nextDouble();
				
			}
			
			System.out.print("Введите свободный член уравнения (после =): ");
			b[i] = scanner.nextDouble();
			
		}
		
		return new SystemOfEquations(x, b);
				
	}
	
	
	// Main
	public static void main(String[] args) {
		
		menu();
		
	}

}
